/**
*	@file: 		Sorts.hpp
*	@author:	Austin Bailey
*	@date:		4/3/2015
*	@purpose:	implementation file for sorts class
**/
#include <iostream>
#include <string>
#include <chrono>
#include <functional>
#include <ctime>
#include <cassert>
#include <fstream>
#include <random>
#include "Sorts.h"
template<typename T>
void Sorts<T>::insertionSort(T arr[], int size)
{
	T temp;
	int j;
	for(int i=1; i<size; i++)
	{
		j = i;
		while((j>0)&&(arr[j-1]>arr[j]))
		{
			temp=arr[j];
			arr[j]=arr[j-1];
			arr[j-1]=temp;
			j--;
		}
	}
	assert( Sorts<T>::isSorted(arr,size));

}

template<typename T>
void Sorts<T>::bubbleSort(T arr[], int size)
{
	T tempt = arr[0]; 
	for(int i = 0; i<size; i++)
	{
		for(int j=0; j<(size-1); j++)
		{
			if(arr[j]>arr[j+1])
			{
				tempt=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=tempt;
			}
		}
	}
	assert( Sorts<T>::isSorted(arr,size));
}

template<typename T>
void Sorts<T>::mergeSort(T arr[], int size)
{
	if(size==1)
	{
		return;
	}
	T* left=arr;
	int leftSize=size/2;
	T* right=arr+(size/2+1);
	int rightSize=(size-(size/2));
	mergeSort(left,leftSize);
	mergeSort(right,rightSize);
	merge(left,right,leftSize,rightSize);
}

template<typename T>
void Sorts<T>::quickSort(T arr[], int size)
{

}

template<typename T>
void Sorts<T>::quickSortMedian(T arr[], int size)
{

}

template<typename T>
void Sorts<T>::selectionSort(T arr[], int size)
{
	T tempt;
	int smallestIndex=0;
	for(int i=0; i<size; i++)
	{
		T smallest=arr[i];
		for(int j=i; j<size; j++)
		{
			if(smallest>arr[j])
			{
				smallest=arr[j];
				smallestIndex=j;
			}
		}
		tempt=arr[i];
		arr[i]=smallest;
		arr[smallestIndex]=tempt;
	}
//	assert( Sorts<T>::isSorted(arr,size));
}

template<typename T>
bool Sorts<T>::isSorted(T arr[], int size)
{
	for(int i=0; i<size-1; i++)
	{
		if(arr[i]>arr[i+1])
		{
			return false;
		}
	}
	return true;
}

template<typename T>
double Sorts<T>::sortTimer(std::function<void(T[],int)> sort, T arr[], int size)
{
	std::chrono::system_clock::time_point start;
	std::chrono::system_clock::time_point end;
	std::chrono::duration<double> elapsed;
	start = std::chrono::system_clock::now();
	sort(arr,size);
	end = std::chrono::system_clock::now();
	elapsed = (end-start);	
	return elapsed.count();
}

template<typename T>
void Sorts<T>::merge(T* a1, T* a2, int size1, int size2)
{
	T* temp= new int[size1+size2];
	int a1ref=0;
	int a2ref=0;
	for(int i=0; i<(size1+size2);i++)
	{
		if((a1ref<size1)&&(a2ref<size2))
		{
			if(a1[a1ref]<=a2[a2ref])
			{
				temp[i]=a1[a1ref];
				a1ref++;
			}
			else if(a1[a1ref]>a2[a2ref])
			{
				temp[i]=a2[a2ref];
				a2ref++;
			}
		}
		else if(a1ref==size1)
		{
			temp[i]=a2[a2ref];
			a2ref++;
		}
		else
		{
			temp[i]=a1[a1ref];
			a1ref++;
		}	
	}
	for(int i=0; i<(size1+size2);i++)
	{
		a1[i]=temp[i];
	}
	delete temp;
	return;
}

template<typename T>
void Sorts<T>::quickSortRec(T arr[], int first, int last, bool median)
{

}

template<typename T>
void Sorts<T>::setMedianPivot(T arr[], int first, int last)
{

}

template<typename T>
int Sorts<T>::partition(T arr[], int first, int last, bool median)
{
	return 0;
}

template<typename T>
void Sorts<T>::shuffle(T arr[], int size)
{
	std::default_random_engine generator(time(nullptr));
	std::uniform_int_distribution<int> distribution(0,size-1);
	T tempt = arr[0];
	int rand;
	for(int i=0; i<size; i++)
	{
		rand=distribution(generator);
		tempt= arr[i];
		arr[i]=arr[rand];
		arr[rand]=tempt;
	}
}
